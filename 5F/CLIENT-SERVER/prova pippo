#define DIM 512
#define SERVERPORT 63400

int main(){
    struct sockaddr_in servizio;
    int socketfd;
    char str1[DIM], str2[DIM], c[1];

    servizio.sin_family = AF_INET;
    servizio.sin_addr.s_addr = htonl(INADDR_ANY);
    servizio.sin_port = htons(SERVERPORT);

    socketfd = socket(AF_INET, SOCK_STREAM, 0);
    if(socketfd == -1){
        printf("errore");
        return -1;
    }

    if(connect(socketfd, (struct sockaddr*)&servizio, sizeof(servizio)) == -1){
        printf("errore");
        return -1;
    }

    printf("stringa: \n");
    scanf("%s", str1);
    write(socketfd, str1, sizeof(str1));
    printf("carattere: \n");
    scanf("%c", c);
    write(socketfd, c, sizeof(c));
    read(socketfd, str2, sizeof(str2));
    printf("stringa pulita: %s\n", str2);
    close(socketfd);

    return 0;
}

#define DIM 512
#define SERVERPORT 63400

void pulisci(char str1[], char c[], char str2[]){
    int k = 0;
    for (int i = 0; i < strlen(str1); i++){
        if(str1[i] != c[0]){
            str2[k++] = str1[i];
        }
    }
}

int main(){
    struct sockaddr_in servizio , addr_remoto;
    int socketfd, soa, fromlen = sizeof(servizio);
    char str1[DIM], str2[DIM], c[1];

    servizio.sin_family = AF_INET;
    servizio.sin_addr.s_addr = htonl(INADDR_ANY);
    servizio.sin_port = htons(SERVERPORT);

    socketfd = socket(AF_INET, SOCK_STREAM, 0);

    bind(socketfd, (struct sockaddr*)&servizio, sizeof(servizio));

    listen(socketfd, 10);

    while(1){
        fflush(stdout);
        
        soa = accept(socketfd, struct(sockaddr*)&addr_remoto, &fromlen);

        read(soa, str1, sizeof(str1));

        read(soa, c, sizeof(c));

        pulisci(str1, c, str2);

        write(soa, str2, sizeof(str2));

        close(soa);

    }

    return 0;
}
